/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.Inet4Address;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.Timer;
import javax.swing.UIManager;
import remoteMethodInvocation.Server;

/**
 *
 * @author JH
 */
public class StartServerWindow extends javax.swing.JFrame {

   private DefaultListModel model;
   private DefaultListModel model2;
   private Server server;
   private boolean open;
   private Connection connection = null;
   private Statement statement = null;
   private ResultSet resultSet = null;

   /**
    * Creates new form startServerWindow
    */
   public StartServerWindow() {
      initComponents();
      jTabbedPane1.setVisible(false);
      open = true;
   }

   private void updateData() {
      if (server != null && open) {
//         updateLoggedUsers();
         updateRegisteredUsers();
      }
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jLabel1 = new javax.swing.JLabel();
      jButtonStart = new javax.swing.JButton();
      jLabel2 = new javax.swing.JLabel();
      jTabbedPane1 = new javax.swing.JTabbedPane();
      jScrollPane1 = new javax.swing.JScrollPane();
      model = new DefaultListModel();
      jList1 = new JList(model);
      jScrollPane2 = new javax.swing.JScrollPane();
      model2 = new DefaultListModel();
      jList2 = new JList(model2);
      jButtonCloseAllClients = new javax.swing.JButton();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      addWindowListener(new java.awt.event.WindowAdapter() {
         public void windowClosed(java.awt.event.WindowEvent evt) {
            formWindowClosed(evt);
         }
         public void windowClosing(java.awt.event.WindowEvent evt) {
            formWindowClosing(evt);
         }
      });

      jLabel1.setText("Address:");

      jButtonStart.setText("Start");
      jButtonStart.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonStartActionPerformed(evt);
         }
      });

      try{
         jLabel2.setText(Inet4Address.getLocalHost().getHostAddress().toString());
      }catch(Exception e){
         jLabel2.setText("Unknown");
      }

      jList1.setModel(model);
      jScrollPane1.setViewportView(jList1);

      jTabbedPane1.addTab("Logged Users", jScrollPane1);

      jList2.setModel(model2);
      jScrollPane2.setViewportView(jList2);

      jTabbedPane1.addTab("Registered Users", jScrollPane2);

      jButtonCloseAllClients.setText("Close All Clients");
      jButtonCloseAllClients.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonCloseAllClientsActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jLabel1)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jButtonStart)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(jButtonCloseAllClients)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel1)
               .addComponent(jLabel2))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButtonStart)
               .addComponent(jButtonCloseAllClients))
            .addContainerGap(27, Short.MAX_VALUE))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
      try {
         Registry registry = LocateRegistry.createRegistry(9000);
         server = new Server(this);
         registry.rebind("RTPhoneServer", server);
         System.out.println("start");
         jTabbedPane1.setVisible(true);
         jButtonStart.setVisible(false);
         updateData();
      } catch (Exception e) {
         System.out.println(e);
      }
   }//GEN-LAST:event_jButtonStartActionPerformed

   private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
//      System.out.println("closed!!!!!!");
//      dispose();
   }//GEN-LAST:event_formWindowClosed

   private void jButtonCloseAllClientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseAllClientsActionPerformed
      dispose();
   }//GEN-LAST:event_jButtonCloseAllClientsActionPerformed

   private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
      close();
   }//GEN-LAST:event_formWindowClosing

   @Override
   public void dispose() {
      System.out.println("closed!!!!!!");
      close();
      super.dispose();
   }

   public void close() {
      open = false;
      Vector<Vector<String>> temp = getLoggedUsersPlus();
      for (int index = 0; index < temp.size(); index++) {
         logoff(temp.get(index).get(0), temp.get(index).get(1));
      }
   }

   public boolean logoff(String username, String password) {
      String dbUrl = "jdbc:mysql://" + server.getUrl() + ":" + server.getPort() + "/" + server.getDBName() + "?user=" + server.getUser() + "&password=" + server.getPassword();
      try {
         Class.forName("com.mysql.jdbc.Driver");
         connection = DriverManager.getConnection(dbUrl);
         statement = connection.createStatement();
         String query = "select * from login where user_id='" + username + "' and !(logged is null or logged is NULL or logged=0 or logged='');";
         resultSet = statement.executeQuery(query);
         if (resultSet.next()) {
            query = "UPDATE `RTPhoneDatabase`.`login` SET `logged`=null WHERE `user_id`='" + username + "'";
            System.out.println(query);
            statement.executeUpdate(query);
            return true;
         }
      } catch (Exception e) {
         System.out.println(e);
      }
      return false;
   }

   private Vector<String> writeValues(ResultSet resultSet) throws SQLException {
      Vector<String> temp = new Vector<>();
      while (resultSet.next()) {
         temp.add(resultSet.getString("user_id"));
      }
      return temp;
   }

   private Vector<Vector<String>> writeValuesPlus(ResultSet resultSet) throws SQLException {
      Vector<Vector<String>> temp = new Vector<>();
      Vector<String> temp2 = new Vector<>();
      while (resultSet.next()) {
         temp2.add(resultSet.getString("user_id"));
         temp2.add(resultSet.getString("password"));
         temp.add(temp2);
      }
      return temp;
   }

   public Vector<Vector<String>> getLoggedUsersPlus() {
      String dbUrl = "jdbc:mysql://" + server.getUrl() + ":" + server.getPort() + "/" + server.getDBName() + "?user=" + server.getUser() + "&password=" + server.getPassword();
      try {
         Class.forName("com.mysql.jdbc.Driver");
         connection = DriverManager.getConnection(dbUrl);
         statement = connection.createStatement();
         String query = "select `user_id`,`password` from login where !(logged is null or logged is NULL or logged=0 or logged='');";
         resultSet = statement.executeQuery(query);

         return writeValuesPlus(resultSet);
      } catch (Exception e) {
         System.out.println(e);
      }
      return new Vector<>();
   }

   public Vector<String> getLoggedUsers() {
      String dbUrl = "jdbc:mysql://" + server.getUrl() + ":" + server.getPort() + "/" + server.getDBName() + "?user=" + server.getUser() + "&password=" + server.getPassword();
      try {
         Class.forName("com.mysql.jdbc.Driver");
         connection = DriverManager.getConnection(dbUrl);
         statement = connection.createStatement();
         String query = "select `user_id` from login where !(logged is null or logged is NULL or logged=0 or logged='');";
         resultSet = statement.executeQuery(query);

         return writeValues(resultSet);
      } catch (Exception e) {
         System.out.println(e);
      }
      return new Vector<>();
   }

   public Vector<String> getRegisteredUsers() {
      String dbUrl = "jdbc:mysql://" + server.getUrl() + ":" + server.getPort() + "/" + server.getDBName() + "?user=" + server.getUser() + "&password=" + server.getPassword();
      try {
         Class.forName("com.mysql.jdbc.Driver");
         connection = DriverManager.getConnection(dbUrl);
         statement = connection.createStatement();
         String query = "select `user_id` from login;";
         resultSet = statement.executeQuery(query);

         return writeValues(resultSet);
      } catch (Exception e) {
         System.out.println(e);
      }
      return new Vector<>();
   }

   private void updateLoggedUsers() {
      Vector<String> check = getLoggedUsers();
      model.clear();
      for (int index = 0; index < check.size(); index++) {
         model.addElement(check.get(index));
      }

   }

   public DefaultListModel getUpdateLoggedUsers() {
      return model;
   }

   private void updateRegisteredUsers() {
      Vector<String> check = getRegisteredUsers();
      model2.clear();
      for (int index = 0; index < check.size(); index++) {
         model2.addElement(check.get(index));
      }
   }

   public DefaultListModel getUpdateRegisteredUsers() {
      return model2;
   }

   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try {
         UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(StartServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(StartServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(StartServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(StartServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
            new StartServerWindow().setVisible(true);
         }
      });
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton jButtonCloseAllClients;
   private javax.swing.JButton jButtonStart;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JList jList1;
   private javax.swing.JList jList2;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JTabbedPane jTabbedPane1;
   // End of variables declaration//GEN-END:variables
}
